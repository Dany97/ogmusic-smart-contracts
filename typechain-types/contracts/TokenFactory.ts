/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface TokenFactoryInterface extends utils.Interface {
  functions: {
    "ACTIVE()": FunctionFragment;
    "ADMIN()": FunctionFragment;
    "SUSPENDED()": FunctionFragment;
    "addNewRoleManager(address)": FunctionFragment;
    "addRole(string)": FunctionFragment;
    "deleteRole(string)": FunctionFragment;
    "initialize()": FunctionFragment;
    "mintShares(string,string,string,string,string,string,uint256,uint256,uint256,address)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "setRoles(bytes32[])": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ACTIVE"
      | "ADMIN"
      | "SUSPENDED"
      | "addNewRoleManager"
      | "addRole"
      | "deleteRole"
      | "initialize"
      | "mintShares"
      | "pause"
      | "paused"
      | "setRoles"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ACTIVE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(functionFragment: "SUSPENDED", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addNewRoleManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRole",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintShares",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRoles",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ACTIVE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SUSPENDED", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addNewRoleManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "newRoleManagerSet(address)": EventFragment;
    "sharesCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newRoleManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "sharesCreated"): EventFragment;
}

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface newRoleManagerSetEventObject {
  newRoleManagerAddress: string;
}
export type newRoleManagerSetEvent = TypedEvent<
  [string],
  newRoleManagerSetEventObject
>;

export type newRoleManagerSetEventFilter =
  TypedEventFilter<newRoleManagerSetEvent>;

export interface sharesCreatedEventObject {
  contractAddress: string;
}
export type sharesCreatedEvent = TypedEvent<[string], sharesCreatedEventObject>;

export type sharesCreatedEventFilter = TypedEventFilter<sharesCreatedEvent>;

export interface TokenFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ACTIVE(overrides?: CallOverrides): Promise<[string]>;

    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    SUSPENDED(overrides?: CallOverrides): Promise<[string]>;

    addNewRoleManager(
      newRoleManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addRole(
      roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteRole(
      roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintShares(
      NFTName: PromiseOrValue<string>,
      NFTSymbol: PromiseOrValue<string>,
      NFTDescription: PromiseOrValue<string>,
      NFTUri: PromiseOrValue<string>,
      ERC20SharesName: PromiseOrValue<string>,
      ERC20SharesSymbol: PromiseOrValue<string>,
      sharesAmount: PromiseOrValue<BigNumberish>,
      sharesPrice: PromiseOrValue<BigNumberish>,
      rightsPercentage: PromiseOrValue<BigNumberish>,
      artistAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    setRoles(
      allAccountRoles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ACTIVE(overrides?: CallOverrides): Promise<string>;

  ADMIN(overrides?: CallOverrides): Promise<string>;

  SUSPENDED(overrides?: CallOverrides): Promise<string>;

  addNewRoleManager(
    newRoleManagerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addRole(
    roleName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteRole(
    roleName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintShares(
    NFTName: PromiseOrValue<string>,
    NFTSymbol: PromiseOrValue<string>,
    NFTDescription: PromiseOrValue<string>,
    NFTUri: PromiseOrValue<string>,
    ERC20SharesName: PromiseOrValue<string>,
    ERC20SharesSymbol: PromiseOrValue<string>,
    sharesAmount: PromiseOrValue<BigNumberish>,
    sharesPrice: PromiseOrValue<BigNumberish>,
    rightsPercentage: PromiseOrValue<BigNumberish>,
    artistAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  setRoles(
    allAccountRoles: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ACTIVE(overrides?: CallOverrides): Promise<string>;

    ADMIN(overrides?: CallOverrides): Promise<string>;

    SUSPENDED(overrides?: CallOverrides): Promise<string>;

    addNewRoleManager(
      newRoleManagerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addRole(
      roleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteRole(
      roleName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(overrides?: CallOverrides): Promise<void>;

    mintShares(
      NFTName: PromiseOrValue<string>,
      NFTSymbol: PromiseOrValue<string>,
      NFTDescription: PromiseOrValue<string>,
      NFTUri: PromiseOrValue<string>,
      ERC20SharesName: PromiseOrValue<string>,
      ERC20SharesSymbol: PromiseOrValue<string>,
      sharesAmount: PromiseOrValue<BigNumberish>,
      sharesPrice: PromiseOrValue<BigNumberish>,
      rightsPercentage: PromiseOrValue<BigNumberish>,
      artistAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    setRoles(
      allAccountRoles: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "newRoleManagerSet(address)"(
      newRoleManagerAddress?: null
    ): newRoleManagerSetEventFilter;
    newRoleManagerSet(
      newRoleManagerAddress?: null
    ): newRoleManagerSetEventFilter;

    "sharesCreated(address)"(contractAddress?: null): sharesCreatedEventFilter;
    sharesCreated(contractAddress?: null): sharesCreatedEventFilter;
  };

  estimateGas: {
    ACTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    SUSPENDED(overrides?: CallOverrides): Promise<BigNumber>;

    addNewRoleManager(
      newRoleManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addRole(
      roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteRole(
      roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintShares(
      NFTName: PromiseOrValue<string>,
      NFTSymbol: PromiseOrValue<string>,
      NFTDescription: PromiseOrValue<string>,
      NFTUri: PromiseOrValue<string>,
      ERC20SharesName: PromiseOrValue<string>,
      ERC20SharesSymbol: PromiseOrValue<string>,
      sharesAmount: PromiseOrValue<BigNumberish>,
      sharesPrice: PromiseOrValue<BigNumberish>,
      rightsPercentage: PromiseOrValue<BigNumberish>,
      artistAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    setRoles(
      allAccountRoles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SUSPENDED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNewRoleManager(
      newRoleManagerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addRole(
      roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteRole(
      roleName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintShares(
      NFTName: PromiseOrValue<string>,
      NFTSymbol: PromiseOrValue<string>,
      NFTDescription: PromiseOrValue<string>,
      NFTUri: PromiseOrValue<string>,
      ERC20SharesName: PromiseOrValue<string>,
      ERC20SharesSymbol: PromiseOrValue<string>,
      sharesAmount: PromiseOrValue<BigNumberish>,
      sharesPrice: PromiseOrValue<BigNumberish>,
      rightsPercentage: PromiseOrValue<BigNumberish>,
      artistAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRoles(
      allAccountRoles: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
