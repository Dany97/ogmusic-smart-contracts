/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "RoleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleManager__factory>;
    getContractFactory(
      name: "RoleObserver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RoleObserver__factory>;
    getContractFactory(
      name: "UserManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserManager__factory>;
    getContractFactory(
      name: "IEIP712MetaTransaction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEIP712MetaTransaction__factory>;
    getContractFactory(
      name: "PablockMetaTxReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PablockMetaTxReceiver__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "RoleManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleManager>;
    getContractAt(
      name: "RoleObserver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RoleObserver>;
    getContractAt(
      name: "UserManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserManager>;
    getContractAt(
      name: "IEIP712MetaTransaction",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEIP712MetaTransaction>;
    getContractAt(
      name: "PablockMetaTxReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PablockMetaTxReceiver>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
